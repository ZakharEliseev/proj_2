aiohttp==3.8.4
aioselenium==0.0.1
aiosignal==1.3.1
alembic==1.10.4
aspose-pdf==23.4.0
async-generator==1.10
async-timeout==4.0.2
attrs==23.1.0
beautifulsoup4==4.12.2
blinker==1.6.2
certifi==2022.12.7
cffi==1.15.1
charset-normalizer==3.1.0
ci-info==0.3.0
click==8.1.3
colorama==0.4.6
configobj==5.0.8
configparser==5.3.0
dnspython==2.3.0
email-validator==2.0.0.post2
etelemetry==0.3.0
exceptiongroup==1.1.1
filelock==3.12.0
fitz==0.0.1.dev2
Flask==2.3.1
Flask-Login==0.6.2
Flask-Mail==0.9.1
Flask-Migrate==4.0.4
Flask-SQLAlchemy==3.0.3
Flask-Uploads==0.2.1
Flask-WTF==1.1.1
frozenlist==1.3.3
future==0.18.3
greenlet==2.0.2
h11==0.14.0
httplib2==0.22.0
idna==3.4
isodate==0.6.1
itsdangerous==2.1.2
Jinja2==3.1.2
loguru==0.7.0
looseversion==1.1.2
lxml==4.9.2
Mako==1.2.4
MarkupSafe==2.1.2
multidict==6.0.4
networkx==3.1
nibabel==5.1.0
nipype==1.8.6
numpy==1.24.3
outcome==1.2.0
packaging==23.1
pandas==2.0.1
pathlib==1.0.1
pdf2image==1.16.3
Pillow==9.5.0
ping3==4.0.4
prov==2.0.0
pycparser==2.21
pydot==1.4.2
PyJWT==2.7.0
PyMuPDF==1.22.3
pyparsing==3.0.9
PyPDF2==3.0.1
PyPDF4==1.27.0
PySocks==1.7.1
python-dateutil==2.8.2
pytz==2023.3
pyxnat==1.5
rdflib==6.3.2
requests==2.30.0
scipy==1.10.1
selenium==4.9.0
simplejson==3.19.1
six==1.16.0
sniffio==1.3.0
sortedcontainers==2.4.0
soupsieve==2.4.1
SQLAlchemy==2.0.11
tqdm==4.65.0
traits==6.3.2
trio==0.22.0
trio-websocket==0.10.2
typing_extensions==4.5.0
tzdata==2023.3
urllib3==1.26.15
Wand==0.6.11
Werkzeug==2.3.0
win32-setctime==1.1.0
wsproto==1.2.0
WTForms==3.0.1
wtforms-html5==0.6.1
yarl==1.9.2


Конечно! Ниже приведен пример кода телефонного справочника на Flask с использованием Flask, Flask-Migrate, SQLAlchemy, SQLite3, Bootstrap, Jinja2 и Flask-WTF. Этот пример включает функции добавления, изменения, удаления контактов и поиска по ФИО и организации.

Установите необходимые зависимости:

Copy code
pip install Flask Flask-Migrate SQLAlchemy sqlite3 flask-bootstrap Flask-WTF
Создайте файл app.py и добавьте следующий код:

python
Copy code
from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_bootstrap import Bootstrap
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField
from wtforms.validators import DataRequired

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///phonebook.db'  # Путь к SQLite базе данных
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your-secret-key'  # Задайте свой секретный ключ

db = SQLAlchemy(app)
migrate = Migrate(app, db)
bootstrap = Bootstrap(app)


class Contact(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(120), nullable=False)
    phone_number = db.Column(db.String(20), nullable=False)
    position = db.Column(db.String(120), nullable=False)
    organization = db.Column(db.String(120), nullable=False)

    def __init__(self, full_name, phone_number, position, organization):
        self.full_name = full_name
        self.phone_number = phone_number
        self.position = position
        self.organization = organization


class ContactForm(FlaskForm):
    full_name = StringField('Full Name', validators=[DataRequired()])
    phone_number = StringField('Phone Number', validators=[DataRequired()])
    position = StringField('Position', validators=[DataRequired()])
    organization = StringField('Organization', validators=[DataRequired()])
    submit = SubmitField('Submit')


@app.route('/', methods=['GET', 'POST'])
def index():
    search_form = SearchForm()
    if search_form.validate_on_submit():
        search_query = search_form.search_query.data
        contacts = Contact.query.filter(
            (Contact.full_name.ilike(f'%{search_query}%')) |
            (Contact.organization.ilike(f'%{search_query}%'))
        ).all()
    else:
        contacts = Contact.query.all()
    return render_template('index.html', contacts=contacts, search_form=search_form)


@app.route('/add', methods=['GET', 'POST'])
def add_contact():
    form = ContactForm()
    if form.validate_on_submit():
        contact = Contact(
            full_name=form.full_name.data,
            phone_number=form.phone_number.data,
            position=form.position.data,
            organization=form.organization.data
        )
        db.session.add(contact)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('add_contact.html', form=form)


@app.route('/edit/<int:contact_id>', methods=['GET', 'POST'])
def edit_contact(contact_id):
    contact = Contact.query.get_or_404(contact_id)
    form = ContactForm(obj=contact)
    if form.validate_on_submit():
        contact.full_name = form.full_name.data
        contact.phone_number = form.phone_number.data
        contact.position = form.position.data
        contact.organization = form.organization.data
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('edit_contact.html', form=form, contact=contact)


@app.route('/delete/<int:contact_id>', methods=['GET', 'POST'])
def delete_contact(contact_id):
    contact = Contact.query.get_or_404(contact_id)
    db.session.delete(contact)
    db.session.commit()
    return redirect(url_for('index'))


class SearchForm(FlaskForm):
    search_query = StringField('Search')
    submit = SubmitField('Search')


if __name__ == '__main__':
    app.run(debug=True)
Создайте шаблон index.html и добавьте следующий код:
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Phonebook</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>Phonebook</h1>
        <br>
        <form action="{{ url_for('index') }}" method="POST" class="form-inline">
            {{ search_form.csrf_token }}
            {{ search_form.search_query.label }}: {{ search_form.search_query }}&nbsp;
            {{ search_form.submit }}
        </form>
        <br>
        <table class="table">
            <thead>
                <tr>
                    <th>Full Name</th>
                    <th>Phone Number</th>
                    <th>Position</th>
                    <th>Organization</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for contact in contacts %}
                <tr>
                    <td>{{ contact.full_name }}</td>
                    <td>{{ contact.phone_number }}</td>
                    <td>{{ contact.position }}</td>
                    <td>{{ contact.organization }}</td>
                    <td>
                        <a href="{{ url_for('edit_contact', contact_id=contact.id) }}" class="btn btn-sm btn-primary">Edit</a>
                        <a href="{{ url_for('delete_contact', contact_id=contact.id) }}" class="btn btn-sm btn-danger">Delete</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        <br>
        <a href="{{ url_for('add_contact') }}" class="btn btn-primary">Add Contact</a>
    </div>
</body>
</html>
Создайте шаблон add_contact.html и добавьте следующий код:
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Add Contact</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>Add Contact</h1>
        <br>
        <form action="{{ url_for('add_contact') }}" method="POST">
            {{ form.csrf_token }}
            {{ form.full_name.label }}: {{ form.full_name }}<br><br>
            {{ form.phone_number.label }}: {{ form.phone_number }}<br><br>
            {{ form.position.label }}: {{ form.position }}<br><br>
            {{ form.organization.label }}: {{ form.organization }}<br><br>
            {{ form.submit }}
        </form>
    </div>
</body>
</html>
Создайте шаблон edit_contact.html и добавьте следующий код:
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Edit Contact</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>Edit Contact</h1>
        <br>
        <form action="{{ url_for('edit_contact', contact_id=contact.id) }}" method="POST">
            {{ form.csrf_token }}
            {{ form.full_name.label }}: {{ form.full_name }}<br><br>
            {{ form.phone_number.label }}: {{ form.phone_number }}<br><br>
            {{ form.position.label }}: {{ form.position }}<br><br>
            {{ form.organization.label }}: {{ form.organization }}<br><br>
            {{ form.submit }}
        </form>
    </div>
</body>
</html>
Запустите приложение, выполнив команду python app.py.
Теперь вы можете открыть браузер и перейти по адресу http://localhost:5000, чтобы увидеть ваш телефонный справочник. Вы сможете добавлять, изменять, удалять контакты и выполнять поиск по ФИО и организации.

Обратите внимание, что в этом примере используется SQLite в качестве базы данных. Если вы хотите использовать другую базу данных, вам может потребоваться изменить SQLALCHEMY_DATABASE_URI в файле app.py.